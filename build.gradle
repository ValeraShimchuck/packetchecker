import groovy.json.JsonOutput
import java.nio.charset.StandardCharsets
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

shadowJar {
    archiveClassifier.set("dev")
    configurations = [project.configurations.shadow]
}

remapJar {
    dependsOn(shadowJar)
    inputFile = tasks.shadowJar.archiveFile
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 16
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

tasks.register('createMappingsJsonFile') {
    doLast {
        File mappingsFile = file('src/main/resources/mappings.json')
        if (!mappingsFile.exists()) {
            mappingsFile.createNewFile()
            mappingsFile.write(getClassMappings())
        }
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    archiveClassifier.set("dev")
    //from('src/main/resources') {
    //    include 'mappings.json'
    //}

    //doFirst {
    //    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    //    String jsonClassMappings = getClassMappings()
    //    outputStream.write(jsonClassMappings.getBytes(StandardCharsets.UTF_8))
    //    String hardCodePath = "packetchecker-1.0-SNAPSHOT"
    //    String normalCodePath = "${project.archivesBaseName}-${project.version}"
    //    ZipOutputStream zipOutputStream = new ZipOutputStream(
    //            new FileOutputStream("$buildDir/libs/${hardCodePath}.jar")
    //    )
    //    zipOutputStream.putNextEntry(new ZipEntry("mappings.json"))
    //    zipOutputStream.write(outputStream.toByteArray())
    //    zipOutputStream.closeEntry()
    //    zipOutputStream.close()
    //}
    dependsOn createMappingsJsonFile
}



static def serverPackets() {
    String packageName = "net.minecraft.packet.c2s.play"
}

def getClassMappings() {
    File home = new File(System.properties['user.home'] as String)
    File loomCaches = new File(home, ".gradle/caches/fabric-loom/${project.minecraft_version}/")
    File mappingPath = new File(loomCaches.listFiles().find { it.isDirectory() }, "mappings.tiny")
    String[] allFields = mappingPath.text.split("\n")
    Map<String, String> classMap = new HashMap<String, String>()
    allFields.each {
        String[] fieldData = it.split("\t")
        //println fieldData.toArrayString()
        if (fieldData.length != 4) return
        if (fieldData[0] != "c") return
        classMap.put(fieldData[2], fieldData[3])
    }
    return JsonOutput.toJson(classMap)
}

//tasks.register('mappingsTest') {
//    doLast {
//        //configurations.compileClasspath.each { println it }
//        //def home = new File(System.properties['user.home'] as String)
//        //def loomCaches = new File(home, ".gradle/caches/fabric-loom/${project.minecraft_version}/")
//        //def mappingPath = new File(loomCaches.listFiles().find { it.isDirectory() }, "mappings.tiny")
//        //println mappingPath.text.substring(0, 100)
//        getClassMappings()
//    }
//}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
